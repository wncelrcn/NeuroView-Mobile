<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.NeuroViewExam&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.NeuroViewExam&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;        &#10;        &lt;activity&#10;            android:name=&quot;.activities.DashboardActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.NeuroViewExam&quot; /&gt;&#10;            &#10;        &lt;activity&#10;            android:name=&quot;.activities.UploadActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.NeuroViewExam&quot; /&gt;&#10;            &#10;        &lt;activity&#10;            android:name=&quot;.activities.ResultActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.NeuroViewExam&quot; /&gt;&#10;            &#10;        &lt;activity&#10;            android:name=&quot;.activities.TumorDetailActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.NeuroViewExam&quot; /&gt;&#10;            &#10;        &lt;activity&#10;            android:name=&quot;.activities.PastRecordsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.NeuroViewExam&quot; /&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:networkSecurityConfig=&quot;@xml/network_security_config&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.NeuroViewExam&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.NeuroViewExam&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;        &#10;        &lt;activity&#10;            android:name=&quot;.activities.DashboardActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.NeuroViewExam&quot; /&gt;&#10;            &#10;        &lt;activity&#10;            android:name=&quot;.activities.UploadActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.NeuroViewExam&quot; /&gt;&#10;            &#10;        &lt;activity&#10;            android:name=&quot;.activities.ResultActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.NeuroViewExam&quot; /&gt;&#10;            &#10;        &lt;activity&#10;            android:name=&quot;.activities.TumorDetailActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.NeuroViewExam&quot; /&gt;&#10;            &#10;        &lt;activity&#10;            android:name=&quot;.activities.PastRecordsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.NeuroViewExam&quot; /&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroviewexam/network/ApiService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroviewexam/network/ApiService.kt" />
              <option name="originalContent" value="package com.example.neuroviewexam.network&#10;&#10;import android.content.Context&#10;import android.net.Uri&#10;import io.ktor.client.*&#10;import io.ktor.client.engine.android.*&#10;import io.ktor.client.plugins.contentnegotiation.*&#10;import io.ktor.client.request.*&#10;import io.ktor.client.request.forms.*&#10;import io.ktor.client.statement.*&#10;import io.ktor.http.*&#10;import io.ktor.serialization.kotlinx.json.*&#10;import kotlinx.serialization.Serializable&#10;import kotlinx.serialization.json.Json&#10;import java.io.ByteArrayOutputStream&#10;&#10;@Serializable&#10;data class CreateImageRequest(&#10;    val name: String&#10;)&#10;&#10;@Serializable&#10;data class PredictionData(&#10;    val success: Boolean,&#10;    val predicted_class: Int? = null,&#10;    val tumor_type: String? = null,&#10;    val confidence: Double? = null,&#10;    val probabilities: List&lt;Double&gt;? = null,&#10;    val class_probabilities: Map&lt;String, Double&gt;? = null,&#10;    val message: String? = null,&#10;    val error: String? = null&#10;)&#10;&#10;@Serializable&#10;data class ApiResponse(&#10;    val success: Boolean,&#10;    val message: String? = null,&#10;    val data: ImageData? = null,&#10;    val prediction: PredictionData? = null,&#10;    val prediction_error: String? = null&#10;)&#10;&#10;@Serializable&#10;data class ImageData(&#10;    val id: String,&#10;    val name: String,&#10;    val url: String,&#10;    val uploaded_at: String,&#10;    val information: PredictionData? = null // Add information field for past records&#10;)&#10;&#10;@Serializable&#10;data class PastRecordsResponse(&#10;    val count: Int,&#10;    val data: List&lt;ImageData&gt;,&#10;    val message: String,&#10;    val success: Boolean&#10;)&#10;&#10;&#10;class ApiService {&#10;    // Make sure this baseUrl is correct for fetching all records.&#10;    // Based on the JSON, it looks like it might be the same endpoint used for uploads,&#10;    // but without any specific ID or file. You might need to confirm this with your backend.&#10;    private val baseUrl = &quot;http://192.168.1.12:5001/api/auto&quot; // Assuming this endpoint fetches all records with a GET request&#10;&#10;    private val client = HttpClient(Android) {&#10;        install(ContentNegotiation) {&#10;            json(Json {&#10;                ignoreUnknownKeys = true&#10;                isLenient = true&#10;            })&#10;        }&#10;    }&#10;&#10;    suspend fun createImage(name: String): Result&lt;ApiResponse&gt; {&#10;        return try {&#10;            val response: HttpResponse = client.post(baseUrl) {&#10;                contentType(ContentType.Application.Json)&#10;                setBody(CreateImageRequest(name = name))&#10;            }&#10;&#10;            when (response.status) {&#10;                HttpStatusCode.OK, HttpStatusCode.Created -&gt; {&#10;                    Result.success(ApiResponse(success = true, message = &quot;Image created successfully&quot;))&#10;                }&#10;                else -&gt; {&#10;                    Result.failure(Exception(&quot;Server returned ${response.status.value}: ${response.bodyAsText()}&quot;))&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun uploadImage(context: Context, imageUri: Uri, imageName: String): Result&lt;ApiResponse&gt; {&#10;        return try {&#10;            println(&quot;NeuroView: Starting image upload to $baseUrl&quot;)&#10;&#10;            val inputStream = context.contentResolver.openInputStream(imageUri)&#10;            val imageBytes = inputStream?.use { input -&gt;&#10;                val outputStream = ByteArrayOutputStream()&#10;                input.copyTo(outputStream)&#10;                outputStream.toByteArray()&#10;            } ?: throw Exception(&quot;Could not read image file&quot;)&#10;&#10;            println(&quot;NeuroView: Image size: ${imageBytes.size} bytes&quot;)&#10;&#10;            val fileName = imageName.ifBlank { &quot;image.jpg&quot; }&#10;            val mimeType = context.contentResolver.getType(imageUri) ?: &quot;image/jpeg&quot;&#10;&#10;            println(&quot;NeuroView: Uploading file: $fileName, type: $mimeType&quot;)&#10;&#10;            val response: HttpResponse = client.submitFormWithBinaryData(&#10;                url = baseUrl,&#10;                formData = formData {&#10;                    append(&quot;file&quot;, imageBytes, Headers.build {&#10;                        append(HttpHeaders.ContentType, mimeType)&#10;                        append(HttpHeaders.ContentDisposition, &quot;filename=\&quot;$fileName\&quot;&quot;)&#10;                    })&#10;                    append(&quot;name&quot;, imageName)&#10;                }&#10;            )&#10;&#10;            println(&quot;NeuroView: Response status: ${response.status}&quot;)&#10;&#10;            when (response.status) {&#10;                HttpStatusCode.OK, HttpStatusCode.Created -&gt; {&#10;                    val responseText = response.bodyAsText()&#10;                    println(&quot;NeuroView: Response body: $responseText&quot;)&#10;&#10;                    val jsonResponse = Json { ignoreUnknownKeys = true }.decodeFromString&lt;ApiResponse&gt;(responseText)&#10;                    println(&quot;NeuroView: Parsed response: $jsonResponse&quot;)&#10;&#10;                    if (jsonResponse.prediction == null) {&#10;                        println(&quot;NeuroView: Warning - No prediction data in response&quot;)&#10;                    } else {&#10;                        println(&quot;NeuroView: Prediction success: ${jsonResponse.prediction?.success}&quot;)&#10;                    }&#10;&#10;                    Result.success(jsonResponse)&#10;                }&#10;                else -&gt; {&#10;                    val errorBody = response.bodyAsText()&#10;                    println(&quot;NeuroView: Error response: $errorBody&quot;)&#10;                    Result.failure(Exception(&quot;Server returned ${response.status.value}: $errorBody&quot;))&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            println(&quot;NeuroView: Upload exception: ${e.message}&quot;)&#10;            e.printStackTrace()&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun getPastRecords(): Result&lt;PastRecordsResponse&gt; {&#10;        return try {&#10;            println(&quot;NeuroView: Fetching past records from $baseUrl&quot;)&#10;            val response: HttpResponse = client.get(baseUrl) // Assuming GET to baseUrl fetches all records&#10;&#10;            println(&quot;NeuroView: Past Records Response status: ${response.status}&quot;)&#10;&#10;            when (response.status) {&#10;                HttpStatusCode.OK -&gt; {&#10;                    val responseText = response.bodyAsText()&#10;                    println(&quot;NeuroView: Past Records Response body: $responseText&quot;)&#10;                    val pastRecordsResponse = Json { ignoreUnknownKeys = true }.decodeFromString&lt;PastRecordsResponse&gt;(responseText)&#10;                    Result.success(pastRecordsResponse)&#10;                }&#10;                else -&gt; {&#10;                    val errorBody = response.bodyAsText()&#10;                    println(&quot;NeuroView: Past Records Error response: $errorBody&quot;)&#10;                    Result.failure(Exception(&quot;Server returned ${response.status.value}: $errorBody&quot;))&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            println(&quot;NeuroView: Fetching past records exception: ${e.message}&quot;)&#10;            e.printStackTrace()&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    fun close() {&#10;        client.close()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.neuroviewexam.network&#10;&#10;import android.content.Context&#10;import android.net.Uri&#10;import io.ktor.client.*&#10;import io.ktor.client.engine.android.*&#10;import io.ktor.client.plugins.contentnegotiation.*&#10;import io.ktor.client.request.*&#10;import io.ktor.client.request.forms.*&#10;import io.ktor.client.statement.*&#10;import io.ktor.http.*&#10;import io.ktor.serialization.kotlinx.json.*&#10;import kotlinx.serialization.Serializable&#10;import kotlinx.serialization.json.Json&#10;import java.io.ByteArrayOutputStream&#10;&#10;@Serializable&#10;data class CreateImageRequest(&#10;    val name: String&#10;)&#10;&#10;@Serializable&#10;data class PredictionData(&#10;    val success: Boolean,&#10;    val predicted_class: Int? = null,&#10;    val tumor_type: String? = null,&#10;    val confidence: Double? = null,&#10;    val probabilities: List&lt;Double&gt;? = null,&#10;    val class_probabilities: Map&lt;String, Double&gt;? = null,&#10;    val message: String? = null,&#10;    val error: String? = null&#10;)&#10;&#10;@Serializable&#10;data class ApiResponse(&#10;    val success: Boolean,&#10;    val message: String? = null,&#10;    val data: ImageData? = null,&#10;    val prediction: PredictionData? = null,&#10;    val prediction_error: String? = null&#10;)&#10;&#10;@Serializable&#10;data class ImageData(&#10;    val id: String,&#10;    val name: String,&#10;    val url: String,&#10;    val uploaded_at: String,&#10;    val information: PredictionData? = null // Add information field for past records&#10;)&#10;&#10;@Serializable&#10;data class PastRecordsResponse(&#10;    val count: Int,&#10;    val data: List&lt;ImageData&gt;,&#10;    val message: String,&#10;    val success: Boolean&#10;)&#10;&#10;&#10;class ApiService {&#10;    // Make sure this baseUrl is correct for fetching all records.&#10;    // Based on the JSON, it looks like it might be the same endpoint used for uploads,&#10;    // but without any specific ID or file. You might need to confirm this with your backend.&#10;    private val baseUrl = &quot;http://192.168.1.12:5001/api/auto&quot; // Assuming this endpoint fetches all records with a GET request&#10;&#10;    private val client = HttpClient(Android) {&#10;        install(ContentNegotiation) {&#10;            json(Json {&#10;                ignoreUnknownKeys = true&#10;                isLenient = true&#10;            })&#10;        }&#10;    }&#10;&#10;    suspend fun createImage(name: String): Result&lt;ApiResponse&gt; {&#10;        return try {&#10;            val response: HttpResponse = client.post(baseUrl) {&#10;                contentType(ContentType.Application.Json)&#10;                setBody(CreateImageRequest(name = name))&#10;            }&#10;&#10;            when (response.status) {&#10;                HttpStatusCode.OK, HttpStatusCode.Created -&gt; {&#10;                    Result.success(ApiResponse(success = true, message = &quot;Image created successfully&quot;))&#10;                }&#10;                else -&gt; {&#10;                    Result.failure(Exception(&quot;Server returned ${response.status.value}: ${response.bodyAsText()}&quot;))&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun uploadImage(context: Context, imageUri: Uri, imageName: String): Result&lt;ApiResponse&gt; {&#10;        return try {&#10;            println(&quot;NeuroView: Starting image upload to $baseUrl&quot;)&#10;&#10;            val inputStream = context.contentResolver.openInputStream(imageUri)&#10;            val imageBytes = inputStream?.use { input -&gt;&#10;                val outputStream = ByteArrayOutputStream()&#10;                input.copyTo(outputStream)&#10;                outputStream.toByteArray()&#10;            } ?: throw Exception(&quot;Could not read image file&quot;)&#10;&#10;            println(&quot;NeuroView: Image size: ${imageBytes.size} bytes&quot;)&#10;&#10;            val fileName = imageName.ifBlank { &quot;image.jpg&quot; }&#10;            val mimeType = context.contentResolver.getType(imageUri) ?: &quot;image/jpeg&quot;&#10;&#10;            println(&quot;NeuroView: Uploading file: $fileName, type: $mimeType&quot;)&#10;&#10;            val response: HttpResponse = client.submitFormWithBinaryData(&#10;                url = baseUrl,&#10;                formData = formData {&#10;                    append(&quot;file&quot;, imageBytes, Headers.build {&#10;                        append(HttpHeaders.ContentType, mimeType)&#10;                        // Remove quotes from filename&#10;                        append(HttpHeaders.ContentDisposition, &quot;form-data; name=file; filename=$fileName&quot;)&#10;                    })&#10;                    append(&quot;name&quot;, imageName)&#10;                }&#10;            )&#10;&#10;            println(&quot;NeuroView: Response status: ${response.status}&quot;)&#10;&#10;            when (response.status) {&#10;                HttpStatusCode.OK, HttpStatusCode.Created -&gt; {&#10;                    val responseText = response.bodyAsText()&#10;                    println(&quot;NeuroView: Response body: $responseText&quot;)&#10;&#10;                    val jsonResponse = Json { ignoreUnknownKeys = true }.decodeFromString&lt;ApiResponse&gt;(responseText)&#10;                    println(&quot;NeuroView: Parsed response: $jsonResponse&quot;)&#10;&#10;                    if (jsonResponse.prediction == null) {&#10;                        println(&quot;NeuroView: Warning - No prediction data in response&quot;)&#10;                    } else {&#10;                        println(&quot;NeuroView: Prediction success: ${jsonResponse.prediction?.success}&quot;)&#10;                    }&#10;&#10;                    Result.success(jsonResponse)&#10;                }&#10;                else -&gt; {&#10;                    val errorBody = response.bodyAsText()&#10;                    println(&quot;NeuroView: Error response: $errorBody&quot;)&#10;                    Result.failure(Exception(&quot;Server returned ${response.status.value}: $errorBody&quot;))&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            println(&quot;NeuroView: Upload exception: ${e.message}&quot;)&#10;            e.printStackTrace()&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun getPastRecords(): Result&lt;PastRecordsResponse&gt; {&#10;        return try {&#10;            println(&quot;NeuroView: Fetching past records from $baseUrl&quot;)&#10;            val response: HttpResponse = client.get(baseUrl) // Assuming GET to baseUrl fetches all records&#10;&#10;            println(&quot;NeuroView: Past Records Response status: ${response.status}&quot;)&#10;&#10;            when (response.status) {&#10;                HttpStatusCode.OK -&gt; {&#10;                    val responseText = response.bodyAsText()&#10;                    println(&quot;NeuroView: Past Records Response body: $responseText&quot;)&#10;                    val pastRecordsResponse = Json { ignoreUnknownKeys = true }.decodeFromString&lt;PastRecordsResponse&gt;(responseText)&#10;                    Result.success(pastRecordsResponse)&#10;                }&#10;                else -&gt; {&#10;                    val errorBody = response.bodyAsText()&#10;                    println(&quot;NeuroView: Past Records Error response: $errorBody&quot;)&#10;                    Result.failure(Exception(&quot;Server returned ${response.status.value}: $errorBody&quot;))&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            println(&quot;NeuroView: Fetching past records exception: ${e.message}&quot;)&#10;            e.printStackTrace()&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    fun close() {&#10;        client.close()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/xml/network_security_config.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/xml/network_security_config.xml" />
              <option name="updatedContent" value="&lt;network-security-config&gt;&#10;    &lt;domain-config cleartextTrafficPermitted=&quot;true&quot;&gt;&#10;        &lt;domain&gt;192.168.1.12&lt;/domain&gt;&#10;    &lt;/domain-config&gt;&#10;&lt;/network-security-config&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;agp = &quot;8.11.1&quot;&#10;kotlin = &quot;2.0.21&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.2.1&quot;&#10;espressoCore = &quot;3.6.1&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.2&quot;&#10;activityCompose = &quot;1.10.1&quot;&#10;composeBom = &quot;2024.09.00&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;androidx-navigation-compose = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-compose&quot;, version = &quot;2.7.7&quot; }&#10;androidx-navigation-runtime-android = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-runtime&quot;, version = &quot;2.7.7&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-serialization = { id = &quot;org.jetbrains.kotlin.plugin.serialization&quot;, version.ref = &quot;kotlin&quot; }&#10;" />
              <option name="updatedContent" value="[versions]&#10;agp = &quot;8.11.1&quot;&#10;kotlin = &quot;2.0.21&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.2.1&quot;&#10;espressoCore = &quot;3.6.1&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.2&quot;&#10;activityCompose = &quot;1.10.1&quot;&#10;composeBom = &quot;2024.09.00&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;androidx-navigation-compose = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-compose&quot;, version = &quot;2.7.7&quot; }&#10;androidx-navigation-runtime-android = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-runtime&quot;, version = &quot;2.7.7&quot; }&#10;ktor-client-core = { group = &quot;io.ktor&quot;, name = &quot;ktor-client-core&quot;, version = &quot;2.3.9&quot; }&#10;ktor-client-android = { group = &quot;io.ktor&quot;, name = &quot;ktor-client-android&quot;, version = &quot;2.3.9&quot; }&#10;ktor-client-content-negotiation = { group = &quot;io.ktor&quot;, name = &quot;ktor-client-content-negotiation&quot;, version = &quot;2.3.9&quot; }&#10;ktor-serialization-kotlinx-json = { group = &quot;io.ktor&quot;, name = &quot;ktor-serialization-kotlinx-json&quot;, version = &quot;2.3.9&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-serialization = { id = &quot;org.jetbrains.kotlin.plugin.serialization&quot;, version.ref = &quot;kotlin&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>